use super::wheel_factorization;

use std::collections::HashSet;

pub fn result() -> String {
    "solution not ready yet".to_string()
}

/*
Highly divisible triangular number
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th
triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
fn divisors_for_number(
    n: u64,
    w: &wheel_factorization::FactorizationWheel,
) -> HashSet<u64> {
    let f = wheel_factorization::prime_factorization_using_wheel(n, w);
    let mut ds = HashSet::new();
    ds.insert(1);
    ds.insert(n);

    for i in &f {
        let mut factor = *i;
        ds.insert(factor);
        for j in &f {
            factor *= j;
            if factor < n && n % factor == 0 {
                ds.insert(factor);
            }
        }
    }

    // println!("{} : {}", n, ds.len());

    ds
}
fn first_triangle_number_with_n_divisors(n: u64) -> u64 {
    let w = &wheel_factorization::build_factorization_wheel(4);

    let mut triangle_number = 1;
    for i in 2..1000 {
        triangle_number += i;
        // I think it's a reasonable assumption that even numbers
        // will always have more factors.
        if triangle_number % 2 == 0 {
            let tmp = wheel_factorization::prime_factorization_using_wheel(
                triangle_number,
                w,
            );
            divisors_for_number(triangle_number, w);
            if tmp.len() + 2 >= n as usize {
                return triangle_number;
            }
        }
    }
    0
}
#[test]
fn euler_012() {
    // todo!
    assert_eq!(first_triangle_number_with_n_divisors(5), 28);
    // assert_eq!(first_triangle_number_with_n_divisors(100), 28);
}
